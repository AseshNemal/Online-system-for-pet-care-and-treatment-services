{"ast":null,"code":"var _jsxFileName = \"/Users/aseshnemal/Desktop/git/Online-system-for-pet-care-and-treatment-services/frontend/src/components/BluetoothManager.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\n\n// BluetoothManager component handles connecting to micro:bit\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass BluetoothManager {\n  constructor() {\n    this.device = null;\n    this.server = null;\n    this.service = null;\n    this.characteristic = null;\n    this.stepCount = 0;\n    this.isConnected = false;\n  }\n  async connectToDevice() {\n    try {\n      const device = await navigator.bluetooth.requestDevice({\n        filters: [{\n          name: 'StepCounter'\n        }],\n        optionalServices: ['1234'] // Customize service UUID for your device\n      });\n      this.device = device;\n      console.log('Device selected:', device);\n\n      // Connect to the device\n      this.server = await device.gatt.connect();\n      console.log('Connected to the device');\n      this.service = await this.server.getPrimaryService('1234');\n      this.characteristic = await this.service.getCharacteristic('2A00'); // UUID for steps data\n      this.isConnected = true;\n\n      // Start receiving notifications\n      this.characteristic.startNotifications();\n      this.characteristic.addEventListener('characteristicvaluechanged', this.onCharacteristicValueChanged.bind(this));\n    } catch (error) {\n      console.error('Connection failed:', error);\n      this.isConnected = false;\n    }\n  }\n  onCharacteristicValueChanged(event) {\n    const value = event.target.value;\n    this.stepCount = parseInt(new TextDecoder().decode(value), 10);\n    console.log('Step count:', this.stepCount);\n  }\n  disconnect() {\n    if (this.device && this.device.gatt.connected) {\n      this.device.gatt.disconnect();\n      this.isConnected = false;\n      console.log('Disconnected from the device');\n    }\n  }\n  getStepCount() {\n    return this.stepCount;\n  }\n  isDeviceConnected() {\n    return this.isConnected;\n  }\n}\nconst BluetoothManagerComponent = () => {\n  _s();\n  const [stepCount, setStepCount] = useState(0);\n  const [isConnected, setIsConnected] = useState(false);\n  const bluetoothManager = new BluetoothManager();\n  const handleConnect = async () => {\n    if (!isConnected) {\n      await bluetoothManager.connectToDevice();\n      if (bluetoothManager.isDeviceConnected()) {\n        setIsConnected(true);\n        startUpdatingStepCount();\n      } else {\n        alert('Failed to connect');\n      }\n    } else {\n      bluetoothManager.disconnect();\n      setIsConnected(false);\n      setStepCount(0);\n    }\n  };\n  const startUpdatingStepCount = () => {\n    setInterval(() => {\n      if (bluetoothManager.isDeviceConnected()) {\n        setStepCount(bluetoothManager.getStepCount());\n      }\n    }, 1000); // Update every 1 second\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleConnect,\n      children: isConnected ? 'Disconnect' : 'Connect to Micro:bit'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Step Count: \", stepCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};\n_s(BluetoothManagerComponent, \"m9/WSMl2FuHKYdK4x9LAhqh6f5k=\");\n_c = BluetoothManagerComponent;\nexport default BluetoothManagerComponent;\nvar _c;\n$RefreshReg$(_c, \"BluetoothManagerComponent\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","BluetoothManager","constructor","device","server","service","characteristic","stepCount","isConnected","connectToDevice","navigator","bluetooth","requestDevice","filters","name","optionalServices","console","log","gatt","connect","getPrimaryService","getCharacteristic","startNotifications","addEventListener","onCharacteristicValueChanged","bind","error","event","value","target","parseInt","TextDecoder","decode","disconnect","connected","getStepCount","isDeviceConnected","BluetoothManagerComponent","_s","setStepCount","setIsConnected","bluetoothManager","handleConnect","startUpdatingStepCount","alert","setInterval","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/aseshnemal/Desktop/git/Online-system-for-pet-care-and-treatment-services/frontend/src/components/BluetoothManager.js"],"sourcesContent":["import React, { useState } from 'react';\n\n// BluetoothManager component handles connecting to micro:bit\nclass BluetoothManager {\n    constructor() {\n        this.device = null;\n        this.server = null;\n        this.service = null;\n        this.characteristic = null;\n        this.stepCount = 0;\n        this.isConnected = false;\n    }\n\n    async connectToDevice() {\n        try {\n            const device = await navigator.bluetooth.requestDevice({\n                filters: [{ name: 'StepCounter' }],\n                optionalServices: ['1234'],  // Customize service UUID for your device\n            });\n\n            this.device = device;\n            console.log('Device selected:', device);\n\n            // Connect to the device\n            this.server = await device.gatt.connect();\n            console.log('Connected to the device');\n\n            this.service = await this.server.getPrimaryService('1234');\n            this.characteristic = await this.service.getCharacteristic('2A00'); // UUID for steps data\n            this.isConnected = true;\n\n            // Start receiving notifications\n            this.characteristic.startNotifications();\n            this.characteristic.addEventListener('characteristicvaluechanged', this.onCharacteristicValueChanged.bind(this));\n\n        } catch (error) {\n            console.error('Connection failed:', error);\n            this.isConnected = false;\n        }\n    }\n\n    onCharacteristicValueChanged(event) {\n        const value = event.target.value;\n        this.stepCount = parseInt(new TextDecoder().decode(value), 10);\n        console.log('Step count:', this.stepCount);\n    }\n\n    disconnect() {\n        if (this.device && this.device.gatt.connected) {\n            this.device.gatt.disconnect();\n            this.isConnected = false;\n            console.log('Disconnected from the device');\n        }\n    }\n\n    getStepCount() {\n        return this.stepCount;\n    }\n\n    isDeviceConnected() {\n        return this.isConnected;\n    }\n}\n\nconst BluetoothManagerComponent = () => {\n    const [stepCount, setStepCount] = useState(0);\n    const [isConnected, setIsConnected] = useState(false);\n    const bluetoothManager = new BluetoothManager();\n\n    const handleConnect = async () => {\n        if (!isConnected) {\n            await bluetoothManager.connectToDevice();\n            if (bluetoothManager.isDeviceConnected()) {\n                setIsConnected(true);\n                startUpdatingStepCount();\n            } else {\n                alert('Failed to connect');\n            }\n        } else {\n            bluetoothManager.disconnect();\n            setIsConnected(false);\n            setStepCount(0);\n        }\n    };\n\n    const startUpdatingStepCount = () => {\n        setInterval(() => {\n            if (bluetoothManager.isDeviceConnected()) {\n                setStepCount(bluetoothManager.getStepCount());\n            }\n        }, 1000); // Update every 1 second\n    };\n\n    return (\n        <div>\n            <button onClick={handleConnect}>\n                {isConnected ? 'Disconnect' : 'Connect to Micro:bit'}\n            </button>\n            <p>Step Count: {stepCount}</p>\n        </div>\n    );\n};\n\nexport default BluetoothManagerComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}